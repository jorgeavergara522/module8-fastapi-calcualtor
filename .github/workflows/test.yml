name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Optional pip cache
      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -U pip
          pip install -r requirements.txt
          pip install -r dev-requirements.txt
          python -m playwright install --with-deps

      - name: Run unit + integration tests (optional)
        run: |
          source venv/bin/activate
          if ls tests/unit/*.py >/dev/null 2>&1 || ls tests/integration/*.py >/dev/null 2>&1; then
            pytest -q tests/unit tests/integration --cov=. --cov-report=term-missing
          else
            echo "No unit/integration tests found. Skipping."
          fi

      - name: Run E2E tests (start server)
        run: |
          source venv/bin/activate
          uvicorn main:app --host 0.0.0.0 --port 8000 --log-level warning &
          SERVER_PID=$!
          sleep 2
          pytest -q tests/e2e
          kill $SERVER_PID

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build runtime image
        run: docker build --target runtime -t app:release .

      - name: Run Trivy vulnerability scanner (block on CRITICAL)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: app:release
          format: table
          exit-code: "1"     # Fail if critical vulns found
          ignore-unfixed: true
          severity: CRITICAL # Only CRITICAL blocks

  deploy:
    needs: security
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          target: runtime
          push: true
          tags: |
            jav0613/module8_calc:latest
            jav0613/module8_calc:${{ github.sha }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=registry,ref=jav0613/module8_calc:cache
          cache-to: type=inline,mode=max
